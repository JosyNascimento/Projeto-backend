<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}}</title>
  <script src="/socket.io/socket.io.js"></script>
  <link rel="stylesheet" href="public/css/realtimeproducts.css">
</head>
<body>
  <div class="container">
    <header><h1>{{title}}</h1></header>

    <section class="form-container">
      <h2>Adicionar Produtos</h2>
      <form id="addProductForm">
        <input type="text" id="productTitle" placeholder="Nome do Produto" required />
        <input type="text" id="productDescription" placeholder="Descri√ß√£o" required />
        <input type="number" id="productPrice" placeholder="Pre√ßo" required />
        <input type="number" id="productStock" placeholder="Quantidade em Estoque" required />
        <button type="submit">Adicionar</button>
      </form>
    </section>

    <section class="product-list-container">
      <h2>Produtos</h2>
      <ul id="productList"></ul>
    </section>
  </div>

  <script src="/js/realtimeproducts.js"></script>
  <script>
    const socket = io();

    const fetchProducts = async () => {
      const res = await fetch('/api/products?all=true');
      const data = await res.json();

      const list = document.getElementById('productList');
      list.innerHTML = ''; // Limpa a lista antes de adicionar novos produtos

      if (!data || !Array.isArray(data)) {
        return console.error("Resposta inv√°lida:", data);
      }

      data.forEach(prod => {
        const li = document.createElement('li');
        li.innerHTML = `
          <div class="product-info">
            <strong>${prod.title}</strong> - ${prod.description} - R$${prod.price} - Estoque: ${prod.stock}
          </div>
          <div>
            <button title="Deletar" onclick="deleteProduct('${prod._id}')">üóëÔ∏è</button>
            <button onclick="editProduct('${prod._id}', '${prod.title}', '${prod.description}', ${prod.price}, ${prod.stock})">‚úèÔ∏è</button>
          </div>
        `;
        list.appendChild(li);
      });
    };

    fetchProducts();

    document.getElementById('addProductForm').addEventListener('submit', async e => {
      e.preventDefault();
      
      const title = document.getElementById('productTitle').value;
      const description = document.getElementById('productDescription').value;
      const price = document.getElementById('productPrice').value;
      const stock = document.getElementById('productStock').value;

      await fetch('/admin/addProduct', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, description, price, stock })
      });

      document.getElementById('addProductForm').reset();
      fetchProducts(); // Atualiza a lista depois de adicionar
    });

    async function deleteProduct(pid) {
      try {
        const res = await fetch(`/admin/product/${pid}`, { method: 'DELETE' });
        if (res.ok) {
          fetchProducts(); // Atualiza a lista completa
        }
      } catch (error) {
        console.error('Erro de rede:', error);
        alert('Erro ao tentar deletar produto');
      }
    }

    async function editProduct(pid, currentTitle, currentDesc, currentPrice, currentStock) {
      const title = prompt('Novo t√≠tulo:', currentTitle);
      const description = prompt('Nova descri√ß√£o:', currentDesc);
      const price = parseFloat(prompt('Novo pre√ßo:', currentPrice));
      const stock = parseInt(prompt('Novo estoque:', currentStock));

      if (!title || !description || isNaN(price) || isNaN(stock)) {
        return alert('Dados inv√°lidos');
      }

      await fetch(`/admin/product/${pid}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, description, price, stock })
      });

      fetchProducts();
    }

    socket.on('newProduct', () => {
      fetchProducts(); // Atualiza a lista completa quando um novo produto for adicionado
    });

    socket.on('productDeleted', () => {
      fetchProducts(); // Atualiza a lista quando um produto for deletado
    });

    socket.on('productUpdated', () => {
      fetchProducts(); // Atualiza a lista quando um produto for editado
    });
  </script>
</body>
</html>