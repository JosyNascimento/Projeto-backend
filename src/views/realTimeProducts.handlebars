<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}}</title>
  <script src="/socket.io/socket.io.js"></script>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <div class="container">
    <header><h1>{{title}}</h1></header>

    <section class="form-container">
      <h2>Adicionar Produtos</h2>
      <form id="addProductForm">
        <input type="text" id="productTitle" placeholder="Nome do Produto" required />
        <input type="text" id="productDescription" placeholder="Descri√ß√£o" required />
        <input type="number" id="productPrice" placeholder="Pre√ßo" required />
        <button type="submit">Adicionar</button>
      </form>
    </section>

    <section class="product-list-container">
      <h2>Produtos</h2>
      <ul id="productList"></ul>
    </section>
  </div>
  <script src="/socket.io/socket.io.js"></script>
<script src="/js/realtimeproducts.js"></script>
  <script>
  const socket = io();

  const fetchProducts = async () => {
    const res = await fetch('/api/products');
    const data = await res.json();

    const list = document.getElementById('productList');
    list.innerHTML = ''; // limpa antes de adicionar

    if (!data.payload || !Array.isArray(data.payload)) {
      return console.error("Resposta inv√°lida:", data);
    }

    data.payload.forEach(prod => {
      const li = document.createElement('li');
      li.innerHTML = `
        <strong>${prod.title}</strong> - ${prod.description} - R$${prod.price}
        <button title="Deletar" onclick="deleteProduct('${prod._id}')">üóëÔ∏è</button>
        <button onclick="editProduct('${prod._id}', '${prod.title}', '${prod.description}', ${prod.price})">‚úèÔ∏è</button>
      `;
      list.appendChild(li);
    });
  };

  fetchProducts();

  document.getElementById('addProductForm').addEventListener('submit', async e => {
    e.preventDefault();
    const title = document.getElementById('productTitle').value;
    const description = document.getElementById('productDescription').value;
    const price = document.getElementById('productPrice').value;

    await fetch('/admin/addProduct', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title, description, price })
    });

    document.getElementById('addProductForm').reset();
  });

  async function deleteProduct(pid) {
  try {
    const response = await fetch(`/admin/product/${pid}`, {
      method: 'DELETE'
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Erro ao deletar:', errorText);
      return alert('Erro ao deletar produto');
    }

    fetchProducts(); // Atualiza a lista
  } catch (error) {
    console.error('Erro de rede:', error);
    alert('Erro ao tentar deletar produto');
  }
}


  async function editProduct(pid, currentTitle, currentDesc, currentPrice) {
    const title = prompt('Novo t√≠tulo:', currentTitle);
    const description = prompt('Nova descri√ß√£o:', currentDesc);
    const price = parseFloat(prompt('Novo pre√ßo:', currentPrice));

    if (!title || !description || isNaN(price)) return alert('Dados inv√°lidos');

    await fetch(`/admin/product/${pid}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title, description, price })
    });
  }

  socket.on('updateProducts', () => {
    fetchProducts();
  });
</script>
</body>
</html>